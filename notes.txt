'''
Automation Framework - Introduction
-----------------------------------
What is an Automation Framework
-------------------------------
- It is a or provides a systematic approach to writing, executing, and maintaining test scripts, promoting reusability,
scalability, and efficiency.
- We organize automation project files and folders in structured manner.

Objectives
-----------
i. Reusability: This is better than rewriting
ii. Scalability: Increase in executing script
iii. Maintainability: Change can be done by calling different functionality in multiple places
iv. Efficiency: Minimum manual efforts
v. Reporting: Helps to report


Types of Automation Frameworks
------------------------------
1. Built-in Frameworks
------------------------
- These are Ready-to-use frameworks
- Different types of built-in `Frameworks are ==> TestNG, Junit, Pytest, Unittest, Cucumber, Behave,etc


2. User-Defined/Customized Frameworks
--------------------------------------
- This is Customized frameworks meet specific project or organization requirements.txt by integrating tools and libraries.
- Different types of User-Defined:
i. Hybrid-Driven framework combine pom
ii. Keyword-driven framework
iii. Data Driven Approaches


Different Types of Phases in Developing Automation Framework
--------------------------------------------------------------
1. Requirement Analysis: Identify testing needs, tools, and project requirements.txt.
2. Tool Selection: Choose appropriate tools and libraries based on application type and
   project needs.
3. Framework Design: Decide on the structure, architecture, and approach (e.g., modular,
   hybrid, etc.).
4. Implementation: Develop reusable components, utilities, and test scripts.
5. Integration: Configure CI/CD pipelines for automated execution and reporting.
6. Testing: Validate the framework by executing sample test cases.
7. Maintenance: Continuously improve the framework to accommodate application
   changes.

1. Configurations - Directory
2. Logs - Directory
3. PageObjects - Package
4. Reports - Directory
5. Screen-short - Directory
6. TestCases - Package
7. TestData - Directory
8. Utilities - Package
9. Requirements.txt

Project: https://tutorialsninja.com/demo/


How to Select an Automation Testing Tool for UI
------------------------------------------------
1.Know your Requirements:
	- Identify application type (Static,Dynamic,Responsive)
	- Understand technology stack (HTML,Angular,React)
	- Ensure tool supports all target browsers and platforms
2.Check Tool Features:
	- Cross-browser compatibility
	- Ease of Integration
	- Dynamic content handling (pop-ups & e.g youtube)
3.Evaluate Usability: Simple set-up in your machine e.g pip install selenium, and tutorial
4.Consider Costs: Reducing costs by going for open-source tools e.g either paid or free tools by comparison for hidden costs
5.Test the Tool: Select tools by developing proof of tools (e.g firstly select POC)
6.Feature Readiness: Ensuring regular updates are available for each and every tools
7.Make a Decision: Select a specific tool


How to choose Test Cases for Automation? Best High-Ranking Steps:
------------------------------------------------------------------
1. High Priority Tests: Test cases for critical functionalities of the application.
2. Repetitive Tests: Regression and smoke tests that are run frequently.
3. Data-Driven Tests: Scenarios requiring multiple input combinations.
4. Time-Consuming Tests: Tests that take significant time to execute manually.
5. Stable Tests: Scenarios with a stable application feature.


Avoid Automation: No Need To Automate
---------------------------------------
1. Exploratory or Ad-hoc tests.
2. Tests for features still under development.
3. Low-priority or rarely used functionalities.

- 100% automation is not at all possible practically.


- We only keep modules in the Package;
Python Packages for this project are;
-------------------------------------
1. PageObjects
2. Test Cases
3. Utilities

Directories are;
----------------
1. Configurations
2. Logs
3. Reports
4. Screenshots
5. Test Data

Text file is;
--------------
1. Requirements

- In Java will use .xls file instead of .txt file we're using in python

Next Steps;
------------
1. Create a list of libraries or dependencies
     - Called requirement.txt file and list all the requirements needed
     - Then you go to terminal and type ==> 'pip install - requirements.txt' to automatically install all at once with one simple click
     - Then ==> 'pip list' to confirm they've all been installed
'''
'''
Created:
PageObjects Package: Must consists of Locators (Pointing to specific elements), Constructors, and Methods
    1. HopmePage.py ==> consists of multiple elements
'''

Execution Code: pytest -s -v testCases/test_001_AccountRegistration.py

Screenshot pathway:

Import os

os.path.dirname(os.getcwd())+”\screenshots\\”+text_account_reg.png”