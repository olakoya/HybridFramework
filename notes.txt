Automation Framework - Introduction
-----------------------------------
What is an Automation Framework
-------------------------------
- It is a or it provides a systematic approach to writing, executing, and maintaining test scripts, promoting reusability,
scalability, and efficiency.
- We organize automation project files and folders in structured manner.

Objectives
-----------
i. Reusability: This is better than rewriting
ii. Scalability: Increase in executing script
iii. Maintainability: Change can be done by calling different functionality in multiple places
iv. Efficiency: Minimum manual efforts
v. Reporting: Helps to report


Types of Automation Frameworks
------------------------------
1. Built-in Frameworks
------------------------
- These are Ready-to-use frameworks
- Different types of built-in `Frameworks are ==> TestNG, Junit, Pytest, Unittest, Cucumber, Behave,etc


2. User-Defined/Customized Frameworks
--------------------------------------
- This Customized frameworks meet specific project or organization requirements.txt by integrating tools and libraries.
- Different types of User-Defined:
    i. Hybrid-Driven framework combine pom
    ii. Keyword-driven framework
    iii. Data Driven Approaches


Different Types of Phases in Developing Automation Framework
--------------------------------------------------------------
1. Requirement Analysis: Identify testing needs, tools, and project requirements.txt.
2. Tool Selection: Choose appropriate tools and libraries based on application type and
   project needs.
3. Framework Design: Decide on the structure, architecture, and approach (e.g., modular,
   hybrid, etc.).
4. Implementation: Develop reusable components, utilities, and test scripts.
5. Integration: Configure CI/CD pipelines for automated execution and reporting.
6. Testing: Validate the framework by executing sample test cases.
7. Maintenance: Continuously improve the framework to accommodate application
   changes.

1. Configurations - Directory
2. Logs - Directory
3. PageObjects - Package
4. Reports - Directory
5. Screen-short - Directory
6. TestCases - Package
7. TestData - Directory
8. Utilities - Package
9. Requirements.txt

Project URL: https://tutorialsninja.com/demo/


How to Select an Automation Testing Tool for UI
------------------------------------------------
1.Know your Requirements:
	- Identify application type (Static,Dynamic,Responsive)
	- Understand technology stack (HTML,Angular,React)
	- Ensure tool supports all target browsers and platforms
2.Check Tool Features:
	- Cross-browser compatibility
	- Ease of Integration
	- Dynamic content handling (pop-ups & e.g youtube)
3.Evaluate Usability: Simple set-up in your machine e.g pip install selenium, and tutorial
4.Consider Costs: Reducing costs by going for open-source tools e.g either paid or free tools by comparison for hidden costs
5.Test the Tool: Select tools by developing proof of tools (e.g firstly select POC)
6.Feature Readiness: Ensuring regular updates are available for each and every tools
7.Make a Decision: Select a specific tool


How to choose Test Cases for Automation? Best High-Ranking Steps:
------------------------------------------------------------------
1. High Priority Tests: Test cases for critical functionalities of the application.
2. Repetitive Tests: Regression and smoke tests that are run frequently.
3. Data-Driven Tests: Scenarios requiring multiple input combinations.
4. Time-Consuming Tests: Tests that take significant time to execute manually.
5. Stable Tests: Scenarios with a stable application feature.


Avoid Automation: No Need To Automate
---------------------------------------
1. Exploratory or Ad-hoc tests.
2. Tests for features still under development.
3. Low-priority or rarely used functionalities.

- 100% automation is not at all possible practically.

- We only keep modules in the Package;

Python Packages for this project are;
-------------------------------------
1. PageObjects
2. Test Cases
3. Utilities

Directories are;
----------------
1. Configurations
2. Logs
3. Reports
4. Screenshots
5. Test Data

Text file is;
--------------
1. Requirements

- In Java will use .xls file instead of .txt file we're using in python

Next Steps;
------------
1. Create a list of libraries or dependencies
     - Make requirement.txt file and list all the requirements needed in the file
     - Then you go to terminal and type cmd ==> 'pip install - requirements.txt' to automatically install all listed at once with one simple click
     - Then cmd ==> 'pip list' to confirm they've all been installed

Created:
1. PageObjects Package: Must consists of Locators (Pointing to specific elements), Constructors, and Methods
    i. HomePage.py ==> consists of multiple elements

    Execution Code: cmd ==> pytest -s -v testCases/test_001_AccountRegistration.py

2. Screenshot pathway:
 Cmd lines :
    Import os

    os.path.dirname(os.getcwd())+”\screenshots\\”+text_account_reg.png”

Importance of Logging:
-----------------------
1. Every application keeps a log file.
2. All actions performed in the application are recorded in this log file.
3. By looking at the log file, we can understand what the user is doing, especially in banking and financial apps.
4. When a bug occurs, it gets logged in the file. We can send this log file to the developer, who can analyze it to identify
the issue.
5. In automation frameworks, logs are important because we often run many test cases at once. While we work on other tasks,
the log file helps us track the status of these tests (like warnings, failures, or passes). This way, we can see what each
automated test case is doing.
6. Levels of logs ==> Warn>Debug>info>error>fatal

How to open Report in a browser?
---------------------------------
- Right click the displayed automatic output 'name' inside the 'reports' folder after running the code
- Click on 'Open in'
- Click on 'Browser'
- Then Click on preferred browser to display the report
- Then date and time stamp would display on the opened report in browser
- After opening on the browser and you click on the 'Test' the full captured log call will display
- And if one did a multiple Test Cases, it will display under the 'Test' Column

Creating LoginPage
-------------------
- Validation shouldn't be included in the page object class

Test Data
----------
    i. baseurl = https://tutorialsninja.com/demo/index.php?route=common/home
    ii. email = test@example.com
    iii. password = abcxyz


    Email: abcxyz@example.com
    password: abcxyz


Codes to Run TCs located in the TC Package
------------------------------------------
Code to use when testing all the Test Cases in the Test Case Package is =>  pytest -s -v --browser chrome testCases/

NB:
---
- One should never add code or any test data in the Page Object Class
- It should be pass in the Test Cases files

To Run Different Types of Testing or Group Run, Codes to use in Terminal;
--------------------------------------------------------------------------
1. pytest -s -v -m "sanity" --browser chrome testCases
2. pytest -s -v -m "sanity and regression and smoke" --browser chrome testCases
3. pytest -s -v -m "sanity or regression" --browser chrome testCases

    test_001_AccountRegistration.py is ==> Regression Testing
    test_002_Login.py is ==> Sanity Testing
    test_003_login_ddt.py ==> Smoke and, can be the combination of the 3 types of testing

Selenium Hydrid Framework - 5
------------------------------
As discussed from the above that in the Development of a Framework, there are many approach and these are Multiple Phases
in the design and development of framework:
    1. Analysis: What kind of application,how many pages are there,what are test cases to be automated.
	2. Design & implementation: Design the framework from the scratch.

We cannot automate all in one or two days its a continuous process it will go on for 1 month or 2 months based on project
complexity and number of test cases. As soon as we added all the test cases and once we have done our project normally we will
run our test cases on local machine to see everything is working fine. However, practically we are able to write our test cases in
remote environments.

    3. Execution: We should execute our test cases out of pycharm because pycharm has internal configuration created in
    virtual environments but remote environments do not. Therefore, we have to run in remote environments also. Before this, we should
    conduct our tests without pycharm in local environment first using command prompt and that would be a success too.
    4. Maintenance: Git , GitHub, Jenkins

STEPS FOR CODES REPOSITORY
---------------------------
GitHub Link: https://github.com/olakoya/HybridFramework.git
- git add .
- git commit -m 'updates'
- git remote add origin "https://github.com/olakoya/HybridFramework.git"

Running Test in Command Prompt and run.bat file
------------------------------------------------
1. Creating Requirements.bat file contains packages like:
Pip install pytest
Pip install selenium
Pip install pytest-html
Pip install pytest-xdist
Pip install pytest-ordering
Pip install openpyxl
Pip install allure-pytest

2. To run .bat file, cmd to use is:
pytest -s -v -m "sanity" --browser chrome testCases

Master is the branch when working code is available

Another branch will be created when an amendment is needed, made and when a Code Review is required

And that's when a Main branch is changed to Master branch

Selenium Hydrid Framework - 6
-----------------------------
1. Build ==> Test ==> This is Continuous Integration CI done by Developer and Tester
2. Package ==> Deploy ==> This is Continuous Delivery done CD by DevOps after approval

Above are each stage of tasks

Agent Pools
-------------
1.Already packages are installed
2.install packages first in requirements.txt


To Install *Jenkins*:
----------------------
Jenkins is a Java Based application ==> Java installed

1. Install Jenkins
2. Install Java
3. Ensure jenkins installation i.e. jenkins.war file is in the same folder as docker-compose file and selenium-server-4.27.0 file
4. Then open the folder all the above download files are located and open it in a terminal
5. Verify java is installed in your system by tying java --version on your terminal, then output will show the version installed if it's already on your computer
6. Commands to run jenkins is ==> java -jar jenkins.war
7. Output is ==> PythonProject % java -jar jenkins.war
Running with Java 11 from /Library/Java/JavaVirtualMachines/temurin-11.jdk/Contents/Home, which is older than the minimum required version (Java 17).
Supported Java versions are: [17, 21]
See https://jenkins.io/redirect/java-support/ for more information.
8. Because the current version of java doesn't support jenkins as stated in the output above, then one needs to upgrade java
9. Command to use to upgrade java is ==> java -jar jenkins.war --enable-future-java
See: https://docs.brew.sh/Homebrew-and-Python
==> azure-cli
zsh completions have been installed to:
  /usr/local/share/zsh/site-functions
10. After updating your Java to the accurate version that works for Jenkins
11. Then repeat the steps and the Commands to run jenkins is ==> java -jar jenkins.war
12. After installation and you seeing "hudson.lifecycle.Lifecycle#onReady: Jenkins is fully up and running" written on terminal
13. Go to your browser and type localhost:8080 (this is the default host where jenkins run) on search engine but localhost:4444 is port number
14. Jenkins page is loaded and this "/Users/olakoya/.jenkins/secrets/initialAdminPassword" is displayed prompting administration password to be entered
15. The administration password is displayed on the terminal "a2011cee58cb4f43b040d5170a0c28f1"
16. A page appeared and install all libraries compatible to Jenkins, then Getting Started "Create First Admin User" form page is popped up to be completed
17. I completed all textfield using "admin" and then for email I used admin@gmail.com
18. Instance Configuration page is popped up with Jenkins URL: "http://localhost:8080/" and click "Save and Finish"
19. Jenkins homepage is displayed and then click on 'Manage Jenkins' at the left bar options
20. If you need extra tool to install, click on Plugins - search the tool name like 'Maven' if you use Java and then click install
21. Because Jenkins is Java base application which means it's a Java file
22. Go back to Manage Jenkins and click on Tools and scroll down to JDK Installations
23. Click on JDK installations 'Add JDK' button, give name 'Java Home' and click on check box to install automatically
24. Repeat the same for Git Installations
25. Scroll to the bottom page and click on 'Apply' then 'Save'
26. Go back to 'Dashboard' by clicking on Dashboard
27. Click on 'New Item' by the left bar
28. In the 'Enter an item name' text box type name of your project 'HybridFramework'
29. Then select an item type i.e. the project type and for this project I select 'Freestyle Project' which is basic package and click save
30. A Configuration page appear, then go to your Github repository and click on the url link
31. Then place the repo url link in the Repository URL text field
32. For Branch Specifier you enter where your push are located either ./main or ./master
33. Scroll down, For Triggers you can select any or Build periodically
34. One can configure Environment if you desire
35. For Build Steps, select any appropriate to your project device, because I use macOS I select 'Execute with Shell'
36. Sequential execution via windows required using commandline ==> pytest -s -v -m "sanity" --browser chrome testCases
37. For Post-build Actions, select anyone suitable to your project e.g 'E-mail Notification'
38. Click 'Apply' and 'Save'
39. Click Dashboard to view your project/s
40. Then click any project you want to work on
41. To execute the selected project, click 'Build Now' on the left tab for it to run
42. You would see the project start running the automation on the page

2 Things to take Notes:
------------------------
1. Before deployment ==> Tests are executed Automatically
2. DG ==> Branch ==> execute in Jenkins by selecting your branch ==> PR ==> Master branch
- DG likely stands for Development Gateway or Development Group — but most commonly, teams use it as shorthand for Development Git or Dev Group branch.
- In practice: This means your feature branch or development branch — basically, where developers do their work.
- Example: DG/feature-login might be a developer’s working branch.

Meaning of DG ==> Branch ==> execute in Jenkins by selecting your branch ==> PR ==> Master branch:
----------------------------------------------------------------------------------------------------
It really means:

1. DG → Developer creates a feature branch off main or develop

2. Branch → You push your work to that feature branch

3. Jenkins → You run tests/builds by selecting that branch in Jenkins

4. PR → You make a Pull Request (PR) from your feature branch into master (or main)

5. Master → When PR is approved and tests pass, the branch is merged into the main production branch.


How To Run and Open Jenkins Job from Terminal and Localhost Browser the Following Day?
---------------------------------------------------------------------------------------
1. Cmdline to install again via Homebrew on MacOS ==> brew install jenkins-lts
    - To make a java run automatically for future execution, use commandline:
    - i. java -jar jenkins.war
    - ii. java -jar jenkins.war --enable-future-java
2. Start the Jenkins service ==> brew services start jenkins-lts
3. After a few seconds, open Jenkins in your browser ==> http://localhost:8080 (or your Jenkins server URL)
4. Enter Username and Password to Login
5. Click on your job (e.g., HybridFramework)
6. Click Configure
7. Scroll to "Build Triggers" section
8. Check the box: Build periodically
9. Enter a cron expression to run the job once the next day (e.g., at 9:00 AM) ==> 0 9 * * * (This means: minute 0, hour 9, every day.)

To Make it run only once tomorrow?
-----------------------------------
Even thought that Jenkins doesn’t support one-time future runs natively, but here are two good workarounds:

Option A: Use “Build periodically” + disable after:
-----------------------------------------------------
1. Use the cron schedule: 0 9 * * *
2. After the job runs tomorrow, manually disable it.
3. Or add a post-build step to disable itself after running (requires a script or plugin)

Option B: Trigger Jenkins from a macOS shell
----------------------------------------------
1. Use launchd or cron to trigger Jenkins job remotely:
==> curl -X POST http://localhost:8080/job/HybridFramework/build --user youruser:yourAPItoken
2. Schedule this command with:
==> echo "curl -X POST http://localhost:8080/job/HybridFramework/build --user youruser:yourAPItoken" | at 09:00 AM tomorrow
at is not installed by default on macOS. One can use launchctl or cron as an alternative.


To stop Jenkins running from the terminal, depends on how Jenkins method was started:
---------------------------------------------------------------------------------------
1. If you started Jenkins manually using java -jar jenkins.war:
- Just press:==> Ctrl + C
2. If Jenkins is running as a Homebrew service:
- Stop it using:==> brew services stop jenkins-lts
3. If you used plain jenkins:
- Stop it using:==> brew services stop jenkins
4. You can verify it's stopped:
- Commandline ==> brew services list
- Output is ==> Name        Status User File
                    jenkins-lts none

5. If Jenkins is running as a background process (PID):
    - You can find and kill the Jenkins process:
- Find the Jenkins process:==> ps aux | grep jenkins
- Identify the correct PID (Process ID), then kill it:==> kill -9 <PID>

Selenium Hybrid Framework - 7 Remote Execution Via Selenium Grid 11/06/25
---------------------------------------------------------------------------
1. To open terminal from the folder where the selenium server version is located
2. Type this cmd in the terminal ==> java -jar selenium-server-4.31.0.jar standalone
3. Then open the grid by typing http://localhost:4444/ui/ in the browser
4. The Selenium Grid page is loaded
5. God to pycharm terminal

1st url test data / webpage ==> https://tutorialsninja.com/demo/index.php?route=common/home
2nd url test data / webpage ==> https://naveenautomationlabs.com/opencart/index.php?route=common/home


Types of Execution:
--------------------
1. Sequential Mode ==> pytest -s -v --browser chrome --os mac testCases/
2. Parallel Mode (number of test cases to be executed in parallel) in this case there are 2 TCs ==> pytest -s -v -m "sanity" -n=2 testCases/
- 1. Login
- 2 Account Registration

How to Run both Jenkins and Selenium Grid Together in Parallel 12/06/25:
--------------------------------------------------------------------------
1. To execute in Jenkins, firstly, I need to commit the changes on framework ie remote work in github
2. Then open another terminal to start jenkins (java -jar jenkins.war ) to run while selenium grid runs parallel to it making 2 terminals running
3. To check for execution Pass or Fail report, follow the link that looks like the one below given in jenkins output display on console
==> - Generated html report: file:///Users/olakoya/.jenkins/workspace/HybridFramework/reports/12-06-2025%2019-50-42.html -

Remote Execution via Docker 13/06/2025:
----------------------------------------
1. Create your docker-compose.yaml file on pycharm
2. Run Jenkins from remote terminal
3. Open docker desktop
4. In framework terminal enter cmdline to clean old containers ==>  docker-compose down
5. Enter cmdline in pycharm framework to run new containers ==>  docker-compose up --build
6. Then go to browser http://localhost:4444/ui/# to check that selenium grid is up and running
7. On homepage click "Overview" to see the platforms/processes that are running
8. Enter cmdline to execute ==> pytest -s -v -m "sanity" --browser chrome testCases
9. During execution go to selenium grid page, click on session to view the above docker execution
10. The node only has one process to execute i.e only 1 test Cases at a time
11. To have more numbers of processes i.e. Test cases to run, one needs to do some configuration

Agent Pools When Setting up Environments
-----------------------------------------
1.Already packages are installed and automated, and this is maintained by QA team
2.In case they aren't installed yet, one would have to firstly install it in requirements.txt by using this cmd
    ==> pip install -r requirements.txt
    - Should incase docker isn't running yet, Open your Docker desktop
    - Go to the pythonproject folder in terminal, right click and select 'open in terminal' option
    - In terminal enter cmd line to start grid ==> java -jar selenium-server-4.31.0.jar standalone
    - Go to web browser and paste this url ==> http://localhost:4444/ui/# to get selenium grid running
    - Go back to pycharm framework and enter ==> docker ps => in terminal to check that Selenium Grid is spin up
    - Next enter cmdline ==>  docker-compose up -d
    - Then ==> docker ps
3. With the help of Jenkins pipelines features are executed inside the machine
4. To execute with docker, you need to issue it with this command
    ==> docker-compose up
5. You have to create an environment
6. After adding the environment, set-up fixture
7. Run it with this cmd ==>  pytest -s -v -m "sanity" testCases\

HOOK
-----
Sometimes frameworks have a hook in py files to auto-install or update requirements before tests run.
Sometimes frameworks have a hook in py files to auto-install or update requirements before tests run.
Sometimes frameworks have a hook in py files to auto-install or update requirements before tests run.


